<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

clock y;
const int P = 4; //patients
const int C = 2; //caregivers
const int W = 2; //wheelchairs
typedef int[0,P-1] id_p;
typedef int[0,C-1] id_c;
typedef int[0,W-1] id_w;


int isSafe[P]; //1 when patient is at the hospital
int assignedPatients[P];
 /*1 if a patient is taken on the wheelchair till they are dropped to safe.
 is true throughout one cycle Start to Reached_Safe and back to Safe,
 this helps to make sure that multiple caregivers are not assigned to a patient*/

int waitingPatientsInDC[P];
int waitingPatientsToGoToDC[P];
int lenOfWQueueI; //Length of waiting Queue INSIDE, for waitingPatientsInDC
int lenOfWQueueO; //Length of waiting Queue OUTSIDE at ward, for waitingPatientsToGoToDC

const int D = 4; //number of types of delays
const int delay[D]={5,10,20,25};
typedef int[0,D-1] id_d;
const int threshold = 15;
int patientDelay[P];

chan take_p[P], release_p[P], return_p[P], wait[P];  
chan take_c[C], release_c[C], on_Pt_status[C];

//takeBack_p[P] corrosponds to return_p[P]; on_Pt_status[C] (on patient's status check)corrosponds to takeBack_p[P]
int isNotAvailable[C]; //to check if caregiver is busy. If both the caregivers are busy, it display as {1,1}.
int patientAssignedToCaregiver[C]; // which patient is assigned to caregiver

bool isWheelchairBusy[W];
int wheelchairAssignedToCaregiver[C]; // which wheelchair is assigned to caregiver
int wheelchairAssignedToPatient[P]; // which wheelchair is assigned to patient

const int n = 4; //no of patients
const int m = 2; //no of resources

typedef int[0,n-1] patient_id;
typedef int[0,m-1] resource_id;

int holdTime[m] = {3,4};
int recoverTime[n] = {5,10,16,20};

chan takeResource[m];
chan freeResource[m];
chan getInQueueOfResource[m][n];
chan takePatient[n];
chan TStart[n];



</declaration>
	<template>
		<name x="5" y="5">Patient</name>
		<parameter> const id_p id</parameter>
		<declaration>// Place local declarations here.

clock x;

void setDelay(id_d e){
    patientDelay[id]=delay[e];
}

void reset(){
    assignedPatients[id]=0;
    isSafe[id]=0;
    patientDelay[id]=0;
    wheelchairAssignedToPatient[id]=0;

}
void enqueue_wait_out(id_p e){
    waitingPatientsToGoToDC[lenOfWQueueO++]=e;
}

void dequeue_wait_out(){
    int i=0;
    lenOfWQueueO-=1; 
    while(waitingPatientsToGoToDC[i]!=id) i++; 
    while(i&lt;lenOfWQueueO){
         waitingPatientsToGoToDC[i]= waitingPatientsToGoToDC[i+1];
         i++;
    }
     waitingPatientsToGoToDC[i]=0;
}

void enqueue_wait_in(id_p e){
    int i=0;
    waitingPatientsInDC[lenOfWQueueI++]=e;
    wheelchairAssignedToPatient[id]=0;
    assignedPatients[id]=0;
    while(i&lt;C){
        if(patientAssignedToCaregiver[i]==id){
            patientAssignedToCaregiver[i]=0;
            i=C;
        }
        i++;
    }
    
}

void dequeue_wait_in(){
    int i=0;
    lenOfWQueueI-=1; 
    while(waitingPatientsInDC[i]!=id) i++;
    while(i&lt;lenOfWQueueI){
         waitingPatientsInDC[i]= waitingPatientsInDC[i+1];
         i++;
    }
     waitingPatientsInDC[i]=0;
}</declaration>
		<location id="id0" x="-654" y="-476">
			<name x="-671" y="-510">Start</name>
		</location>
		<location id="id1" x="-433" y="-476">
			<name x="-450" y="-459">isTaken</name>
		</location>
		<location id="id2" x="-314" y="-476">
			<name x="-289" y="-484">ReachedDC</name>
		</location>
		<location id="id3" x="-314" y="-348">
			<name x="-391" y="-348">Wait_inDC</name>
		</location>
		<location id="id4" x="-552" y="-476">
			<name x="-586" y="-467">ReqService</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-246" y="-340">TStart[id]!</label>
			<nail x="-246" y="-365"/>
			<nail x="-246" y="-306"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="select" x="-518" y="-527">e:id_d</label>
			<label kind="synchronisation" x="-527" y="-510">take_p[id]!</label>
			<label kind="assignment" x="-535" y="-493">setDelay(e)</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="assignment" x="-671" y="-527">enqueue_wait_out(id)</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-637" y="-374">return_p[id]!</label>
			<label kind="assignment" x="-637" y="-348">reset(), dequeue_wait_in()</label>
			<nail x="-654" y="-348"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-408" y="-433">patientDelay[id]&gt;threshold</label>
			<label kind="synchronisation" x="-306" y="-416">wait[id]?</label>
			<label kind="assignment" x="-365" y="-399">enqueue_wait_in(id)</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-586" y="-425">patientDelay[id]&lt;=threshold</label>
			<label kind="synchronisation" x="-544" y="-408">return_p[id]!</label>
			<label kind="assignment" x="-518" y="-391">reset()</label>
			<nail x="-493" y="-399"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-425" y="-510">release_p[id]!</label>
			<label kind="assignment" x="-425" y="-527">isSafe[id]=1, dequeue_wait_out()</label>
		</transition>
	</template>
	<template>
		<name>Caregiver</name>
		<parameter>const id_c id</parameter>
		<declaration>// Place local declarations here.
clock x;
bool leave;
bool prevPatients;
id_p currPatient;
int delaytime;

void assignPatient(){ //here, the caregiver will get to know which patient is assigned to him.
    int i=0;  
   // int count = 0;
    currPatient = waitingPatientsToGoToDC[0];   
    /* for(i=0;i&lt;P;i++){
        if(isSafe[i]==1) count++;  // this function was written to check if all patients have crossed.                                           
    }
  if(lenOfWQueueI&gt;0&amp;&amp;waitingPatientsInDC[0]!=currPatient) prevPatients=true;
    if(count==P) allCrossed = true;
    count=0; */
}

void collectWaitingPatient(){
    int i=0;
    while(i&lt;P){
            if(assignedPatients[waitingPatientsInDC[i]]!=1){  // checking if that patient is not assigned to any caregiver already.
                patientAssignedToCaregiver[id]= waitingPatientsInDC[i];
                i=P;
            } 
            i++;
    }
    currPatient=patientAssignedToCaregiver[id];
    assignedPatients[currPatient]=1;       
    wheelchairAssignedToPatient[currPatient]=wheelchairAssignedToCaregiver[id];
    delaytime=patientDelay[currPatient];
    
}
void checkDelay(){
    delaytime=patientDelay[currPatient];
    if(delaytime&gt;threshold) leave=true;   //leave without Patient
    else leave=false;      
}

void takeBackPatient(){
    int i=0;
    if(lenOfWQueueI&gt;0&amp;&amp;waitingPatientsInDC[0]!=currPatient) prevPatients=true;  
    if(prevPatients==true){
        while(i&lt;P){
            if(assignedPatients[waitingPatientsInDC[i]]!=1){  // checking if that patient is not assigned to any caregiver already.
                patientAssignedToCaregiver[id]= waitingPatientsInDC[i];
                i=P;
            } 
            i++;
        }
        currPatient=patientAssignedToCaregiver[id];
        assignedPatients[currPatient]=1;       
        wheelchairAssignedToPatient[currPatient]=wheelchairAssignedToCaregiver[id];
        delaytime=patientDelay[currPatient];
    } 
    else currPatient=0; 
}

void reset(){
    int w=wheelchairAssignedToCaregiver[id];
    isNotAvailable[id]=0;
    isWheelchairBusy[w]=false;
    patientAssignedToCaregiver[id]=0;
    wheelchairAssignedToCaregiver[id]=0;
    delaytime=0;
    currPatient=0;
    prevPatients=0;
}
</declaration>
		<location id="id5" x="-29767" y="-29895">
			<name x="-29801" y="-29929">Available</name>
		</location>
		<location id="id6" x="-29605" y="-29895">
			<name x="-29656" y="-29929">Assigned</name>
		</location>
		<location id="id7" x="-29452" y="-29894">
			<name x="-29495" y="-29928">ReleasePatient</name>
		</location>
		<location id="id8" x="-29767" y="-29682">
			<name x="-29809" y="-29674">TakePatientBack</name>
		</location>
		<location id="id9" x="-29945" y="-29793">
			<name x="-29996" y="-29784">GoToCollectPatient</name>
		</location>
		<location id="id10" x="-29452" y="-29682">
			<name x="-29461" y="-29665">Wait</name>
			<label kind="comments" x="-29962" y="-29640">1. When Patient's waiting time is more than threshold. (Leave Without the current Patient)
2. Leave with the previously dropped patient.
3. When Patient's waiting time is less than threshold. (Leave with Current Patient)</label>
		</location>
		<location id="id11" x="-29605" y="-29784">
			<name x="-29605" y="-29818">CheckPrevPatient</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id8"/>
			<target ref="id5"/>
			<label kind="guard" x="-29801" y="-29810">lenOfWQueueI==0
&amp;&amp;isSafe[currPatient]==0</label>
			<label kind="assignment" x="-29750" y="-29776">reset()</label>
			<nail x="-29724" y="-29750"/>
			<nail x="-29724" y="-29835"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="guard" x="-29809" y="-29963">(isNotAvailable[id]==0) &amp;&amp; !(lenOfWQueueO==0 &amp;&amp;
lenOfWQueueI&gt;0)</label>
			<label kind="synchronisation" x="-29733" y="-29920">take_c[id]!</label>
			<label kind="assignment" x="-29750" y="-29894">isNotAvailable[id]=1</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="guard" x="-29656" y="-29657">leave==false</label>
			<label kind="synchronisation" x="-29656" y="-29682">release_c[id]?</label>
			<label kind="comments" x="-29495" y="-29682">3</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id5"/>
			<label kind="guard" x="-29716" y="-29869">prevPatients==false</label>
			<label kind="synchronisation" x="-29690" y="-29852">release_c[id]!</label>
			<label kind="assignment" x="-29656" y="-29835">reset()</label>
			<label kind="comments" x="-29631" y="-29818">1</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id8"/>
			<label kind="guard" x="-29733" y="-29742">prevPatients==true</label>
			<label kind="synchronisation" x="-29733" y="-29724">release_c[id]!</label>
			<label kind="comments" x="-29631" y="-29767">2</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="-29580" y="-29750">leave==true</label>
			<label kind="synchronisation" x="-29571" y="-29716">wait[currPatient]!</label>
			<label kind="assignment" x="-29580" y="-29733">takeBackPatient()</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id10"/>
			<label kind="assignment" x="-29444" y="-29827">checkDelay()</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-29894" y="-29724">release_c[id]!</label>
			<label kind="assignment" x="-29945" y="-29742">collectWaitingPatient()</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id9"/>
			<label kind="guard" x="-29988" y="-29869">lenOfWQueueO==0 &amp;&amp;
lenOfWQueueI&gt;0</label>
			<label kind="synchronisation" x="-29954" y="-29835">take_c[id]!</label>
			<label kind="assignment" x="-29988" y="-29886">isNotAvailable[id]=1</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-29869" y="-29835">return_p[currPatient]?</label>
			<label kind="assignment" x="-29809" y="-29852">reset()</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-29587" y="-29911">release_c[id]!</label>
			<label kind="assignment" x="-29588" y="-29894">assignPatient()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">PatientAtDC</name>
		<parameter>const patient_id p_id</parameter>
		<declaration>// Place local declarations here.
clock x;

int curr_res_time;
int recovery_time_left;
int curr_res_id = -1;

void getRecoveryTime(){
    recovery_time_left = recoverTime[p_id];
}

void res_time(resource_id rid){
    curr_res_time = holdTime[rid];
    curr_res_id = rid;
}</declaration>
		<location id="id12" x="-391" y="0">
			<name x="-442" y="-42">Ask_For_Resource</name>
			<label kind="invariant" x="-416" y="17">x&lt;=10</label>
		</location>
		<location id="id13" x="-102" y="0">
			<name x="-144" y="-34">ResourceGranted</name>
			<label kind="invariant" x="-178" y="42">x&lt;=curr_res_time &amp;&amp;
x&lt;=recovery_time_left</label>
		</location>
		<location id="id14" x="34" y="59">
			<name x="8" y="68">Exit</name>
		</location>
		<location id="id15" x="-527" y="51">
			<name x="-561" y="59">Idle</name>
		</location>
		<location id="id16" x="-246" y="110">
			<name x="-280" y="119">In_Queue</name>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id16"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-204" y="76">takePatient[p_id]!</label>
			<label kind="assignment" x="-221" y="93">x = 0</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id16"/>
			<label kind="select" x="-416" y="51">rid: resource_id</label>
			<label kind="synchronisation" x="-450" y="68">getInQueueOfResource[rid][p_id]!</label>
			<label kind="assignment" x="-399" y="85">res_time(rid),
x = 0</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-467" y="161">return_p[p_id]?</label>
			<nail x="34" y="153"/>
			<nail x="-527" y="153"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-544" y="-8">TStart[p_id]?</label>
			<label kind="assignment" x="-569" y="8">getRecoveryTime(),
x = 0</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="select" x="-255" y="-204">rid : resource_id</label>
			<label kind="guard" x="-255" y="-187">curr_res_id == rid &amp;&amp;
recovery_time_left &gt; curr_res_time</label>
			<label kind="synchronisation" x="-255" y="-153">freeResource[rid]!</label>
			<label kind="assignment" x="-255" y="-136">recovery_time_left -= curr_res_time,
curr_res_time = 0,
x = 0</label>
			<nail x="-246" y="-76"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="select" x="-42" y="-42">rid : resource_id</label>
			<label kind="guard" x="-51" y="-25">curr_res_id == rid &amp;&amp;
recovery_time_left&lt;=curr_res_time</label>
			<label kind="synchronisation" x="-17" y="8">freeResource[rid]!</label>
			<label kind="assignment" x="51" y="25">recovery_time_left = 0,
curr_res_time = 0,
x = 0</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="select" x="-297" y="-34">rid: resource_id</label>
			<label kind="synchronisation" x="-297" y="-17">takeResource[rid]!</label>
			<label kind="assignment" x="-297" y="0">res_time(rid),
x = 0</label>
		</transition>
	</template>
	<template>
		<name>Resource</name>
		<parameter>resource_id r_id</parameter>
		<declaration>// Place local declarations here.

patient_id list[n+1];
int[0,n] len;

// Put an element at the end of the queue
void enqueue(patient_id element)
{
        list[len++] = element;
}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}

// Returns the front element of the queue
patient_id front()
{
   return list[0];
}

// Returns the last element of the queue
patient_id tail()
{
   return list[len - 1];
}

clock x;</declaration>
		<location id="id17" x="-2108" y="-17">
			<name x="-2159" y="-8">PatientsWaiting</name>
			<label kind="invariant" x="-2125" y="8">x &lt;= 1</label>
		</location>
		<location id="id18" x="-1777" y="-17">
			<name x="-1793" y="8">In_Use</name>
		</location>
		<location id="id19" x="-2244" y="-17">
			<name x="-2235" y="-8">Idle</name>
		</location>
		<init ref="id19"/>
		<transition>
			<source ref="id18"/>
			<target ref="id18"/>
			<label kind="select" x="-1717" y="-76">pid: patient_id</label>
			<label kind="synchronisation" x="-1819" y="-59">getInQueueOfResource[r_id][pid]?</label>
			<label kind="assignment" x="-1725" y="-42">enqueue(pid)</label>
			<nail x="-1725" y="25"/>
			<nail x="-1725" y="-93"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id17"/>
			<label kind="select" x="-2202" y="-93">pid: patient_id</label>
			<label kind="synchronisation" x="-2236" y="-76">getInQueueOfResource[r_id][pid]?</label>
			<label kind="assignment" x="-2202" y="-59">enqueue(pid)</label>
			<nail x="-2167" y="-42"/>
			<nail x="-2167" y="17"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="guard" x="-2049" y="-152">len == 0</label>
			<label kind="synchronisation" x="-2074" y="-135">freeResource[r_id]?</label>
			<nail x="-1776" y="-119"/>
			<nail x="-2244" y="-119"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-2074" y="43">takeResource[r_id]?</label>
			<nail x="-2244" y="42"/>
			<nail x="-1777" y="43"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="guard" x="-1955" y="-102">len&gt;0</label>
			<label kind="synchronisation" x="-1989" y="-85">freeResource[r_id]?</label>
			<label kind="assignment" x="-1955" y="-68">x = 0</label>
			<nail x="-1938" y="-68"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="select" x="-1964" y="-33">pid: patient_id</label>
			<label kind="guard" x="-1964" y="-17">pid == front()</label>
			<label kind="synchronisation" x="-2015" y="0">takePatient[pid]?</label>
			<label kind="assignment" x="-1904" y="0">dequeue()</label>
		</transition>
	</template>
	<template>
		<name>Transport</name>
		<parameter>const id_w id</parameter>
		<declaration>
id_p patient;
id_c caregiver;
int used=0;
void patientAssign(id_p e){
    assignedPatients[e]=1;
    patient=e;
    wheelchairAssignedToPatient[e]=id;
}

void caregiverAssign(id_c e){
    caregiver=e;
   patientAssignedToCaregiver[e]=patient;
    wheelchairAssignedToCaregiver[e]=id;
}

void collectPatient(id_c e){
    caregiver=e;
    isWheelchairBusy[id]=true;
    wheelchairAssignedToCaregiver[e]=id;
}</declaration>
		<location id="id20" x="-408" y="-170">
			<name x="-459" y="-187">Free</name>
		</location>
		<location id="id21" x="-187" y="-170">
			<name x="-246" y="-161">PatientAssigned</name>
		</location>
		<location id="id22" x="-34" y="-170">
			<name x="-93" y="-161">CaregiverAssigned</name>
		</location>
		<location id="id23" x="161" y="-170">
			<name x="84" y="-204">PatientReleased</name>
		</location>
		<location id="id24" x="-34" y="-51">
			<name x="-34" y="-34">Wait</name>
		</location>
		<location id="id25" x="-179" y="-52">
			<name x="-246" y="-42">CaregiverReturns</name>
		</location>
		<location id="id26" x="-93" y="34">
			<name x="-127" y="42">CheckPrevPt</name>
		</location>
		<init ref="id20"/>
		<transition>
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="select" x="-204" y="-8">e:id_c</label>
			<label kind="guard" x="-229" y="25">e==caregiver</label>
			<label kind="synchronisation" x="-221" y="8">release_c[e]?</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id26"/>
			<label kind="select" x="-59" y="-17">e:id_p</label>
			<label kind="synchronisation" x="-59" y="17">wait[e]?</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id25"/>
			<label kind="select" x="-467" y="-102">e:id_c</label>
			<label kind="guard" x="-510" y="-51">lenOfWQueueO==0&amp;&amp;lenOfWQueueI&gt;0</label>
			<label kind="synchronisation" x="-484" y="-85">take_c[e]?</label>
			<label kind="assignment" x="-510" y="-68">collectPatient(e)</label>
			<nail x="-408" y="-51"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id20"/>
			<label kind="select" x="-374" y="-144">e:id_p</label>
			<label kind="synchronisation" x="-356" y="-110">return_p[e]?</label>
			<label kind="assignment" x="-306" y="-93">used++</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id25"/>
			<label kind="select" x="-136" y="-93">e:id_c</label>
			<label kind="synchronisation" x="-161" y="-68">release_c[e]!</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="select" x="85" y="-127">e:id_c</label>
			<label kind="guard" x="34" y="-93">e==caregiver</label>
			<label kind="synchronisation" x="59" y="-110">release_c[e]?</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="select" x="17" y="-229">e:id_p</label>
			<label kind="guard" x="0" y="-212">e==patient</label>
			<label kind="synchronisation" x="-8" y="-195">release_p[e]?</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="select" x="-161" y="-246">e:id_c</label>
			<label kind="synchronisation" x="-161" y="-187">take_c[e]?</label>
			<label kind="assignment" x="-195" y="-229">isWheelchairBusy[id]=true, 
caregiverAssign(e)</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="select" x="-314" y="-238">e:id_p</label>
			<label kind="guard" x="-382" y="-204">isWheelchairBusy[id]==false</label>
			<label kind="synchronisation" x="-331" y="-187">take_p[e]?</label>
			<label kind="assignment" x="-348" y="-221">patientAssign(e)</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Patient, Caregiver, Transport, PatientAtDC, Resource;

/*gantt {

Patient (i:id_p):

    Patient(i).Start -&gt; 0, // red
    Patient(i).isTaken -&gt; 9,   //turquiose
    Patient(i).Reached_Safe -&gt; 1; // green


Caregiver (i:id_c):
    Caregiver(i).Available -&gt; 8, // red
    Caregiver(i).Take_wheelchair -&gt; 14,   //orange shade
    Caregiver(i).Busy -&gt; 12, // pink
    Caregiver(i).Wait -&gt; 2, //  blue
    Caregiver(i).TakeBack -&gt; 7;

W:
     Wheelchair.Free -&gt; 4,   //pink
     Wheelchair.PatientAssigned -&gt; 27,//shade of blue
     Wheelchair.CaregiverAssigned -&gt; 28, //dark blue
     Wheelchair.PatientReleased -&gt; 5, // Orange
     Wheelchair.CaregiverReleased -&gt; 6, //yellow
     Wheelchair.CaregiverReturns -&gt; 3; //shade of pink
 
// C(i:int[0,64]): true -&gt; i; // color palette
// 9: turquiose
}*/
       
    </system>
	<queries>
		<query>
			<formula>A[] forall (i : patient_id) forall (j : patient_id) 
PatientAtDC(i).ResourceGranted &amp;&amp; 
PatientAtDC(j).ResourceGranted 
imply (i == j || PatientAtDC(i).curr_res_id != PatientAtDC(j).curr_res_id)</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>E[] (Patient(0).Wait_inDC || Patient(1).Wait_inDC || Patient(2).Wait_inDC || Patient(3).Wait_inDC) imply forall (i : id_p) Patient(i).x&lt;=25</formula>
			<comment>Testing.</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Caregiver(0).DropPatient</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Patient(0).Wait_inDC and (forall (i : id_p) i != 0 imply Patient(i).isTaken)</formula>
			<comment>(There exist a path in some state)While patient one is waiting, other patient can be taken. Waiting of one patient will not stop the operation of taking other patients.</comment>
		</query>
		<query>
			<formula>E[] Patient(0).Wait_inDC imply (Transport(0).CaregiverReturns || Transport(1).CaregiverReturns)</formula>
			<comment>If a patient is waiting, then either Caregiver1 or Caregiver2 will return to pick him/her up.</comment>
		</query>
		<query>
			<formula>E&lt;&gt;forall (i : id_p)Patient(i).Wait_inDC imply Patient(i).Start</formula>
			<comment>For all the patients, if a patient is waiting, he will eventually go back to start state. 
The query verify that a patient cannot remain in Wait state forever.</comment>
		</query>
		<query>
			<formula>E[] (Caregiver(0).DropPatient || Caregiver(1).DropPatient) imply (Patient(0).isTaken || Patient(1).isTaken || Patient(2).isTaken || Patient(3).isTaken)</formula>
			<comment>If any of the caregiver is busy, which means one of patient is taken.  </comment>
		</query>
		<query>
			<formula>A&lt;&gt;forall (i : id_c) forall (j : id_c) 
Caregiver(i).Wait &amp;&amp; Caregiver(j).Wait imply i==j</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall (i : id_c) (Caregiver(i).prevPatients == true) imply Caregiver(i).TakeBack</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E[] (Caregiver(0).prevPatients == true) imply (Transport(0).CaregiverReturns || Transport(1).CaregiverReturns) </formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall (i : id_p) Patient(i).Waiting imply forall (i : id_p) Patient(i).Start</formula>
			<comment>(Always eventually), if a patient is waiting, will eventually always return.</comment>
		</query>
		<query>
			<formula>E[] forall (i : id_w) forall (j : id_c) 
		Transport(i).PatientAssigned &amp;&amp; Transport(j).PatientAssigned
		imply i == j</formula>
			<comment>The transport (Wheelchair) will be assigned to all the patients at some point of time. </comment>
		</query>
		<query>
			<formula>E&lt;&gt; Transport(0).PatientAssigned &amp;&amp; Transport(1).PatientAssigned</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall (i : id_p) Patient(i).Start imply (Transport(0).PatientAssigned || Transport(1).PatientAssigned)</formula>
			<comment> For all the patients, transport (wheelchair) will be aasigned eventually.</comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Caregiver(0).GoToCollectPatient || Caregiver(1).GoToCollectPatient</formula>
			<comment>Reachability

</comment>
		</query>
		<query>
			<formula>E[] (lenOfWQueueO == 0 &amp;&amp; lenOfWQueueI&gt;0 &amp;&amp; Caregiver(0).Available) imply (Caregiver(0).GoToCollectPatient)</formula>
			<comment>If there is no new patients to pick up, and if caregiver is available, 
then the caregiver should return to pick up the waiting patients.</comment>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
