<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

clock y;
const int P = 2; //patients
const int C = 1; //caregivers
const int W = 1; //wheelchairs
typedef int[0,P-1] id_p;
typedef int[0,C-1] id_c;
typedef int[0,W-1] id_w;

clock patient_clocks[P];
int isSafe[P]; //1 when patient is at the hospital
int assignedPatients[P];
 /*1 if a patient is taken on the wheelchair till they are dropped to safe.
 is true throughout one cycle Start to Reached_Safe and back to Safe,
 this helps to make sure that multiple caregivers are not assigned to a patient*/

int waitingPatientsInDC[P];
int PatientsReqDC[P];
int lenOfWq; //Length of waiting Queue INSIDE, for waitingPatientsInDC
int lenOfRq; //Length of waiting Queue OUTSIDE at ward, for waitingPatientsToGoToDC

const int D = 4; //number of types of delays
int delay[D]={5,10,20,25};
typedef int[0,D-1] id_d;
const int threshold = 15;
int treatmentTime[P];

chan take_p[P], release_p[P], return_p[P], wait[P];  
//chan take_c[C], release_c[C], on_Pt_status[C];
chan reqWheel[W];
int wAssign[W];

//takeBack_p[P] corrosponds to return_p[P]; on_Pt_status[C] (on patient's status check)corrosponds to takeBack_p[P]
int isNotAvailable[C]; //to check if caregiver is busy. If both the caregivers are busy, it display as {1,1}.
int patientAssignedToCaregiver[C]; // which patient is assigned to caregiver



const int R = 1; //no of resources

typedef int[0,R-1] id_r;

int holdTime[R] = {2};
int recoverTime[P] = {10,16};

chan takeResource[R];
chan freeResource[R];
chan getIn[R][P];
chan takePatient[P];
chan TStart[P];
bool treatmentStart[P];
bool treatmentDone[P];
bool waitInDC[P];



</declaration>
	<template>
		<name x="5" y="5">Patient</name>
		<parameter>const id_p id</parameter>
		<declaration>// Place local declarations here.

clock x;

void setTreatmentTime(id_d e){
     treatmentTime[id]=delay[e];
}

void reset(){
    assignedPatients[id]=0;
    isSafe[id]=0;
    treatmentTime[id]=0;
    waitInDC[id] = false;
    //wheelchairAssignedToPatient[id]=0;

}
void enqueue_wait_out(id_p e){
     PatientsReqDC[lenOfRq++]=e;
}

void dequeue_wait_out(){
    int i=0;
    lenOfRq-=1; 
    while(PatientsReqDC[i]!=id) i++; 
    while(i&lt;lenOfRq){
         PatientsReqDC[i]= PatientsReqDC[i+1];
         i++;
    }
     PatientsReqDC[i]=0;
}

void enqueue_wait_in(id_p e){
    int i=0;
    waitingPatientsInDC[lenOfWq++]=e;
    //wheelchairAssignedToPatient[id]=0;
    assignedPatients[id]=0;
    while(i&lt;C){
        if(patientAssignedToCaregiver[i]==id){
            patientAssignedToCaregiver[i]=0;
            i=C;
        }
        i++;
    }
    
}

void dequeue_wait_in(){
    int i=0;
    lenOfWq-=1; 
    while(waitingPatientsInDC[i]!=id) i++;
    while(i&lt;lenOfWq){
         waitingPatientsInDC[i]= waitingPatientsInDC[i+1];
         i++;
    }
     waitingPatientsInDC[i]=0;
}</declaration>
		<location id="id0" x="-654" y="-476">
			<name x="-671" y="-510">Start</name>
		</location>
		<location id="id1" x="-408" y="-476">
			<name x="-425" y="-467">Taken</name>
		</location>
		<location id="id2" x="-314" y="-476">
			<name x="-297" y="-484">ReachedDC</name>
		</location>
		<location id="id3" x="-314" y="-348">
			<name x="-416" y="-348">Wait_inDC</name>
		</location>
		<location id="id4" x="-552" y="-476">
			<name x="-586" y="-467">Request</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="select" x="-569" y="-603">e:id_w</label>
			<label kind="guard" x="-603" y="-586">wAssign[e]==false</label>
			<label kind="synchronisation" x="-586" y="-569">reqWheel[e]!</label>
			<nail x="-476" y="-569"/>
			<nail x="-620" y="-569"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-323" y="-323">TStart[id]!</label>
			<nail x="-246" y="-365"/>
			<nail x="-246" y="-306"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="select" x="-484" y="-552">e:id_d</label>
			<label kind="synchronisation" x="-501" y="-535">take_p[id]?</label>
			<label kind="assignment" x="-544" y="-518">setTreatmentTime(e),
dequeue_wait_out()</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="assignment" x="-688" y="-527">enqueue_wait_out(id)</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="-663" y="-289">treatmentDone[id] == true &amp;&amp;(patient_clocks[id]&gt;treatmentTime[id])</label>
			<label kind="synchronisation" x="-637" y="-348">return_p[id]!</label>
			<label kind="assignment" x="-637" y="-331">reset(), dequeue_wait_in(),
treatmentDone[id] = false</label>
			<nail x="-654" y="-348"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-365" y="-442">treatmentTime[id]&gt;threshold</label>
			<label kind="synchronisation" x="-314" y="-459">wait[id]?</label>
			<label kind="assignment" x="-365" y="-425">enqueue_wait_in(id),
treatmentStart[id] = true,
waitInDC[id] = true</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-629" y="-442">treatmentTime[id]&lt;=threshold
 &amp;&amp;(patient_clocks[id]&gt;treatmentTime[id])</label>
			<label kind="synchronisation" x="-544" y="-408">return_p[id]!</label>
			<label kind="assignment" x="-518" y="-391">reset()</label>
			<nail x="-493" y="-399"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-399" y="-501">release_p[id]!</label>
			<label kind="assignment" x="-399" y="-535">isSafe[id]=1, 
patient_clocks[id] = 0</label>
		</transition>
	</template>
	<template>
		<name>Caregiver</name>
		<parameter>const id_c id</parameter>
		<declaration>// Place local declarations here.
clock x;
bool leave;
bool prevPatients;
id_p currPatient;
int delaytime;

void assignPatient(){ //here, the caregiver will get to know which patient is assigned to him.
    int i=0;  
   // int count = 0;
    currPatient = PatientsReqDC[0];   
    /* for(i=0;i&lt;P;i++){
        if(isSafe[i]==1) count++;  // this function was written to check if all patients have crossed.                                           
    }
  if(lenOfWQueueI&gt;0&amp;&amp;waitingPatientsInDC[0]!=currPatient) prevPatients=true;
    if(count==P) allCrossed = true;
    count=0; */
}

void collectWaitingPatient(){
    bool patientAssigned = false;
    int i=0;
    while(i&lt;P){
            if(assignedPatients[waitingPatientsInDC[i]]!=1 &amp;&amp; (treatmentDone[waitingPatientsInDC[i]]==true &amp;&amp; treatmentStart[waitingPatientsInDC[i]]==false)){  // checking if that patient is not assigned to any caregiver already.
                patientAssignedToCaregiver[id]= waitingPatientsInDC[i];
                patientAssigned = true;
                i=P;
            } 
            i++;
    }
    if(patientAssigned == true){
        currPatient=patientAssignedToCaregiver[id];
    }
    else{
        i = 0;
        while(i&lt;P){
            if(assignedPatients[waitingPatientsInDC[i]]!=1){  // checking if that patient is not assigned to any caregiver already.
                patientAssignedToCaregiver[id]= waitingPatientsInDC[i];
                i=P;
            } 
            i++;
        }
        currPatient=patientAssignedToCaregiver[id];
    }
    assignedPatients[currPatient]=1;       
    //wheelchairAssignedToPatient[currPatient]=wheelchairAssignedToCaregiver[id];
    delaytime=treatmentTime[currPatient];
    
}
void checkTreatmentTime(){
    delaytime=treatmentTime[currPatient];
    if(delaytime&gt;threshold) leave=true;   //leave without Patient
    else leave=false;      
}

void takeBackPatient(){
    int i=0;
    if(lenOfWq&gt;0&amp;&amp;waitingPatientsInDC[0]!=currPatient) prevPatients=true;  
    if(prevPatients==true){
        while(i&lt;P){
            if(assignedPatients[waitingPatientsInDC[i]]!=1){  // checking if that patient is not assigned to any caregiver already.
                patientAssignedToCaregiver[id]= waitingPatientsInDC[i];
                i=P;
            } 
            i++;
        }
        currPatient=patientAssignedToCaregiver[id];
        assignedPatients[currPatient]=1;       
        //wheelchairAssignedToPatient[currPatient]=wheelchairAssignedToCaregiver[id];
        delaytime=treatmentTime[currPatient];
    } 
    else currPatient=0; 
}

void reset(){
    //int w=wheelchairAssignedToCaregiver[id];
    isNotAvailable[id]=0;
    //isWheelchairBusy[w]=false;
    patientAssignedToCaregiver[id]=0;
    assignedPatients[currPatient] = 0;
    //wheelchairAssignedToCaregiver[id]=0;
    delaytime=0;
    currPatient=0;
    prevPatients=0;
}</declaration>
		<location id="id5" x="-42049" y="-29904">
			<name x="-42075" y="-29937">Available</name>
			<label kind="comments" x="-42449" y="-29937">4</label>
		</location>
		<location id="id6" x="-41836" y="-29903">
			<name x="-41862" y="-29937">Assigned</name>
		</location>
		<location id="id7" x="-41709" y="-29903">
			<name x="-41777" y="-29937">ReleasePatient</name>
		</location>
		<location id="id8" x="-42049" y="-29691">
			<name x="-42075" y="-29682">Returning</name>
			<label kind="comments" x="-42449" y="-29868">5.</label>
		</location>
		<location id="id9" x="-42177" y="-29801">
			<name x="-42236" y="-29784">CollectPatient</name>
			<label kind="comments" x="-42441" y="-29767">6</label>
		</location>
		<location id="id10" x="-41709" y="-29690">
			<name x="-41735" y="-29682">Waiting</name>
			<label kind="comments" x="-42245" y="-29655">1. When Patient's waiting time is more than threshold. (Leave Without the current Patient)
2. Leave with the previously dropped patient.
3. When Patient's waiting time is less than threshold. (Leave with Current Patient)</label>
		</location>
		<location id="id11" x="-41879" y="-29801">
			<name x="-41862" y="-29818">CheckPrevPatient</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id8"/>
			<target ref="id5"/>
			<label kind="guard" x="-42432" y="-29928">lenOfWq==0
&amp;&amp;isSafe[currPatient]==0</label>
			<label kind="assignment" x="-42432" y="-29894">reset()</label>
			<label kind="comments" x="-41998" y="-29775">4</label>
			<nail x="-41998" y="-29758"/>
			<nail x="-41998" y="-29826"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id5"/>
			<label kind="guard" x="-42432" y="-29758">treatmentDone[currPatient] == false 
&amp;&amp; waitInDC[currPatient] == true</label>
			<label kind="assignment" x="-42432" y="-29724">reset()</label>
			<label kind="comments" x="-42100" y="-29809">6</label>
			<nail x="-42100" y="-29767"/>
			<nail x="-42100" y="-29835"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="guard" x="-42109" y="-29971">(isNotAvailable[id]==0)&amp;&amp; lenOfRq&gt;0</label>
			<label kind="synchronisation" x="-42032" y="-29920">take_p[PatientsReqDC[0]]!</label>
			<label kind="assignment" x="-42100" y="-29954">isNotAvailable[id]=1, assignPatient()</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="guard" x="-41905" y="-29690">leave==false</label>
			<label kind="comments" x="-41777" y="-29691">3</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id5"/>
			<label kind="guard" x="-41981" y="-29877">prevPatients==false</label>
			<label kind="assignment" x="-41956" y="-29860">reset()</label>
			<label kind="comments" x="-41922" y="-29843">1</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id8"/>
			<label kind="guard" x="-41981" y="-29750">prevPatients==true</label>
			<label kind="comments" x="-41922" y="-29784">2</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="-41828" y="-29784">leave==true</label>
			<label kind="synchronisation" x="-41828" y="-29767">wait[currPatient]!</label>
			<label kind="assignment" x="-41828" y="-29750">takeBackPatient()</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id10"/>
			<label kind="assignment" x="-41820" y="-29852">checkTreatmentTime()</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="assignment" x="-42211" y="-29724">collectWaitingPatient()</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id9"/>
			<label kind="guard" x="-42194" y="-29877">lenOfRq==0 &amp;&amp;
lenOfWq&gt;0</label>
			<label kind="assignment" x="-42194" y="-29894">isNotAvailable[id]=1</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id5"/>
			<label kind="guard" x="-42432" y="-29860">treatmentDone[currPatient] == true 
|| (waitInDC[currPatient] == false 
&amp;&amp; isSafe[currPatient] == true)</label>
			<label kind="synchronisation" x="-42432" y="-29809">return_p[currPatient]?</label>
			<label kind="assignment" x="-42432" y="-29792">reset()</label>
			<label kind="comments" x="-42049" y="-29792">5</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-41828" y="-29894">release_p[currPatient]?</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">PatientAtDC</name>
		<parameter>const id_p id</parameter>
		<declaration>// Place local declarations here.
clock x;

int curr_rTime = -1;
int recovery_time_left = -1;
int curr_rid = -1;

void getRecoveryTime(){
    recovery_time_left = recoverTime[id];
}

void res_time(id_r rid){
    curr_rTime = holdTime[rid];
    curr_rid = rid;
}</declaration>
		<location id="id12" x="-391" y="0">
			<name x="-433" y="-34">ResourceRequested</name>
			<label kind="invariant" x="-408" y="8">x&lt;=10</label>
		</location>
		<location id="id13" x="-102" y="0">
			<name x="-161" y="-34">ResourceGranted</name>
			<label kind="invariant" x="-195" y="34">x&lt;=curr_rTime &amp;&amp;
x&lt;=recovery_time_left</label>
		</location>
		<location id="id14" x="34" y="110">
			<name x="8" y="119">Exit</name>
		</location>
		<location id="id15" x="-527" y="102">
			<name x="-552" y="110">Idle</name>
		</location>
		<location id="id16" x="-238" y="93">
			<name x="-264" y="102">In_Queue</name>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id16"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-195" y="76">takePatient[id]!</label>
			<label kind="assignment" x="-178" y="93">x = 0</label>
			<nail x="-102" y="59"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id16"/>
			<label kind="select" x="-382" y="34">rid: id_r</label>
			<label kind="synchronisation" x="-382" y="51">getIn[rid][id]!</label>
			<label kind="assignment" x="-382" y="68">res_time(rid),
x = 0</label>
			<nail x="-391" y="51"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="assignment" x="-306" y="153">treatmentDone[id] = true</label>
			<nail x="34" y="153"/>
			<nail x="-527" y="153"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id12"/>
			<label kind="guard" x="-586" y="0">treatmentStart[id] == true</label>
			<label kind="synchronisation" x="-586" y="17">TStart[id]?</label>
			<label kind="assignment" x="-586" y="34">getRecoveryTime(),
treatmentStart[id] = false,
x = 0</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="select" x="-272" y="-195">rid : id_r</label>
			<label kind="guard" x="-272" y="-178">curr_rid == rid &amp;&amp;
recovery_time_left &gt; curr_rTime</label>
			<label kind="synchronisation" x="-272" y="-93">freeResource[rid]!</label>
			<label kind="assignment" x="-272" y="-144">recovery_time_left -= curr_rTime,
curr_rTime = 0,
x = 0</label>
			<nail x="-102" y="-68"/>
			<nail x="-391" y="-68"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="select" x="-25" y="-17">rid : id_r</label>
			<label kind="guard" x="-25" y="0">curr_rid == rid &amp;&amp;
recovery_time_left&lt;=curr_rTime</label>
			<label kind="synchronisation" x="-25" y="34">freeResource[rid]!</label>
			<label kind="assignment" x="-25" y="51">recovery_time_left = 0,
curr_rTime = 0,
x = 0</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="select" x="-289" y="-34">rid: id_r</label>
			<label kind="synchronisation" x="-289" y="-17">takeResource[rid]!</label>
			<label kind="assignment" x="-289" y="0">res_time(rid),
x = 0</label>
		</transition>
	</template>
	<template>
		<name>Resource</name>
		<parameter>const id_r id</parameter>
		<declaration>// Place local declarations here.

id_p list[P+1];
int[0,P] len;

// Put an element at the end of the queue
void enqueue(id_p element)
{
        list[len++] = element;
}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}

// Returns the front element of the queue
id_p front()
{
   return list[0];
}

// Returns the last element of the queue
id_p tail()
{
   return list[len - 1];
}

clock x;</declaration>
		<location id="id17" x="-2108" y="-17">
			<name x="-2150" y="0">PatientWaiting</name>
			<label kind="invariant" x="-2133" y="17">x &lt;= 1</label>
		</location>
		<location id="id18" x="-1777" y="-17">
			<name x="-1768" y="0">In_Use</name>
		</location>
		<location id="id19" x="-2244" y="-17">
			<name x="-2235" y="-8">Idle</name>
		</location>
		<init ref="id19"/>
		<transition>
			<source ref="id18"/>
			<target ref="id18"/>
			<label kind="select" x="-1717" y="-76">pid: id_p</label>
			<label kind="synchronisation" x="-1725" y="-59">getIn[id][pid]?</label>
			<label kind="assignment" x="-1725" y="-42">enqueue(pid)</label>
			<nail x="-1725" y="0"/>
			<nail x="-1725" y="-85"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id17"/>
			<label kind="select" x="-2202" y="-93">pid: id_p</label>
			<label kind="synchronisation" x="-2201" y="-76">getIn[id][pid]?</label>
			<label kind="assignment" x="-2202" y="-59">enqueue(pid)</label>
			<nail x="-2167" y="-42"/>
			<nail x="-2167" y="17"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="guard" x="-2049" y="-152">len == 0</label>
			<label kind="synchronisation" x="-2074" y="-135">freeResource[id]?</label>
			<nail x="-1776" y="-119"/>
			<nail x="-2244" y="-119"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-2074" y="43">takeResource[id]?</label>
			<nail x="-2244" y="42"/>
			<nail x="-1777" y="43"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="guard" x="-1955" y="-102">len&gt;0</label>
			<label kind="synchronisation" x="-1989" y="-85">freeResource[id]?</label>
			<label kind="assignment" x="-1955" y="-68">x = 0</label>
			<nail x="-1938" y="-68"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="select" x="-1964" y="-33">pid: id_p</label>
			<label kind="guard" x="-1964" y="-17">pid == front()</label>
			<label kind="synchronisation" x="-2015" y="0">takePatient[pid]?</label>
			<label kind="assignment" x="-1904" y="0">dequeue()</label>
		</transition>
	</template>
	<template>
		<name>Wheelchair</name>
		<parameter>const id_w id</parameter>
		<location id="id20" x="-204" y="-34">
			<name x="-214" y="-68">Idle</name>
		</location>
		<location id="id21" x="-76" y="-34">
			<name x="-86" y="-68">Assigned</name>
		</location>
		<init ref="id20"/>
		<transition>
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="select" x="-161" y="-34">e:id_p</label>
			<label kind="synchronisation" x="-178" y="-8">return_p[e]?</label>
			<label kind="assignment" x="-170" y="8">wAssign[id]=false</label>
			<nail x="-144" y="0"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-178" y="-85">reqWheel[id]?</label>
			<label kind="assignment" x="-178" y="-102">wAssign[id]=true</label>
			<nail x="-144" y="-68"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Patient, Wheelchair, Caregiver, PatientAtDC, Resource;

/*gantt {

Patient (i:id_p):

    Patient(i).Start -&gt; 0, // red
    Patient(i).isTaken -&gt; 9,   //turquiose
    Patient(i).Reached_Safe -&gt; 1; // green


Caregiver (i:id_c):
    Caregiver(i).Available -&gt; 8, // red
    Caregiver(i).Take_wheelchair -&gt; 14,   //orange shade
    Caregiver(i).Busy -&gt; 12, // pink
    Caregiver(i).Wait -&gt; 2, //  blue
    Caregiver(i).TakeBack -&gt; 7;

W:
     Wheelchair.Free -&gt; 4,   //pink
     Wheelchair.PatientAssigned -&gt; 27,//shade of blue
     Wheelchair.CaregiverAssigned -&gt; 28, //dark blue
     Wheelchair.PatientReleased -&gt; 5, // Orange
     Wheelchair.CaregiverReleased -&gt; 6, //yellow
     Wheelchair.CaregiverReturns -&gt; 3; //shade of pink
 
// C(i:int[0,64]): true -&gt; i; // color palette
// 9: turquiose
}*/
       
    </system>
	<queries>
		<query>
			<formula>A[]forall (i : id_p) (PatientAtDC(i).ResourceRequested &amp;&amp; PatientAtDC(i).recovery_time_left==0) imply PatientAtDC(i).Exit
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[]forall (i : id_p) PatientAtDC(i).In_Queue imply PatientAtDC(i).recovery_time_left&gt;1
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[]forall (i : id_p) PatientAtDC(i).ResourceRequested imply PatientAtDC(i).recovery_time_left&gt;1
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall (i : id_p)PatientAtDC(i).Ask_For_Resource imply PatientAtDC(i).Exit
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall (i : id_p) Patient(0).Wait_inDC imply (i==0 || Patient(i).isTaken)
			</formula>
			<comment>(There exist a path in some state)While patient one is waiting, other patient can be taken. Waiting of one patient will not stop the operation of taking other patients.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt;forall (i : id_p)Patient(i).Wait_inDC imply Patient(i).Start
			</formula>
			<comment>For all the patients, if a patient is waiting, he will eventually go back to start state. 
The query verify that a patient cannot remain in Wait state forever.
			</comment>
		</query>
		<query>
			<formula>A[] forall (i : id_c) forall (j : id_c) 
Caregiver(i).Waiting &amp;&amp; Caregiver(j).Waiting imply (i==j || i!=j)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E[] Caregiver(0).CollectPatient imply (lenOfRq == 0 &amp;&amp; lenOfWq&gt;0 &amp;&amp; Caregiver(0).Available)
			</formula>
			<comment>If there is no new patients to pick up, and if caregiver is available, 
then the caregiver should return to pick up the waiting patients.
			</comment>
		</query>
		<query>
			<formula>A[] forall (i : id_p) forall (j : id_p) 
PatientAtDC(i).ResourceGranted &amp;&amp; 
PatientAtDC(j).ResourceGranted 
imply (i == j || PatientAtDC(i).curr_rid != PatientAtDC(j).curr_rid)
			</formula>
			<comment>One resource cannot be assiged to two patients at a time.
			</comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[#&lt;=20](&lt;&gt; forall (i:id_c) (Caregiver(i).prevPatients == true) imply
Caregiver(i).Returning)&gt;= 0.98</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E[&lt;=100; 2000](max: patient_clocks[1])</formula>
			<comment>Compute an expected maximum value of Round trip time for a patient
Expect a mean estimate based on 2000 samples.
[To run query, all channels must be broadcast and states with bounded delay.]</comment>
		</query>
		<query>
			<formula>A[] forall (i : id_p) (treatmentTime[i]&gt;=5 &amp;&amp; treatmentTime[i]&lt;=100) || (treatmentTime[i] == 0)</formula>
			<comment>Checking range of delay between 5 and 25. Adding initial delay as 0</comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] forall (i:id_p) (PatientAtDC(i).Exit)</formula>
			<comment>&amp;&amp;(patient_clocks[i]&gt;treatmentTime[i])</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Patient(0).Taken &amp;&amp; Patient(1).Taken</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt;forall (i : id_p)Patient(i).Request imply Patient(i).Taken</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
