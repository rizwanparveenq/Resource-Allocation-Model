<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

// This model is for scenario where all resources are of same kind and patients require same kind of treatment.

const int n = 4; //no of patients
const int m = 2; //no of resources

typedef int[0,n-1] patient_id;
typedef int[0,m-1] resource_id;

int holdTime[m] = {3,4};
int recoverTime[n] = {10,16,20,7};

chan takeResource[m];
chan freeResource[m];
chan getInQueueOfResource[m][n];
chan freeResourceAndAddToPriorityQueue[m][n];
chan takePatient[n];</declaration>
	<template>
		<name x="5" y="5">Patient</name>
		<parameter>const patient_id p_id</parameter>
		<declaration>// Place local declarations here.
clock x;

int curr_res_time;
int recovery_time_left;
int curr_res_id = -1;

void getRecoveryTime(){
    recovery_time_left = recoverTime[p_id];
}

void res_time(resource_id rid){
    curr_res_time = holdTime[rid];
    curr_res_id = rid;
}</declaration>
		<location id="id0" x="-348" y="0">
			<name x="-358" y="-34">Ask_For_Resource</name>
			<label kind="invariant" x="-358" y="17">x&lt;=10</label>
		</location>
		<location id="id1" x="-8" y="0">
			<name x="-18" y="-34">ResourceGranted</name>
			<label kind="invariant" x="-68" y="17">x&lt;=curr_res_time &amp;&amp;
x&lt;=recovery_time_left</label>
		</location>
		<location id="id2" x="323" y="0">
			<name x="313" y="-34">Exit</name>
		</location>
		<location id="id3" x="-569" y="0">
			<name x="-579" y="-34">Idle</name>
		</location>
		<location id="id4" x="-161" y="280">
			<name x="-195" y="289">In_Queue</name>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-221" y="68">curr_res_id != -1</label>
			<label kind="synchronisation" x="-221" y="85">takeResource[curr_res_id]!</label>
			<label kind="assignment" x="-221" y="102">x = 0</label>
			<nail x="-170" y="93"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-119" y="161">takePatient[p_id]?</label>
			<label kind="assignment" x="-119" y="178">x = 0</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="select" x="-340" y="127">rid: resource_id</label>
			<label kind="guard" x="-340" y="144">curr_res_id == -1</label>
			<label kind="synchronisation" x="-340" y="161">getInQueueOfResource[rid][p_id]!</label>
			<label kind="assignment" x="-306" y="178">res_time(rid),
x = 0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="assignment" x="-102" y="323">curr_res_id = -1</label>
			<nail x="-171" y="374"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="assignment" x="-527" y="0">getRecoveryTime(),
x = 0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="select" x="-255" y="-204">rid : resource_id</label>
			<label kind="guard" x="-255" y="-187">curr_res_id == rid &amp;&amp;
recovery_time_left &gt; curr_res_time</label>
			<label kind="synchronisation" x="-255" y="-153">freeResourceAndAddToPriorityQueue[rid][p_id]!</label>
			<label kind="assignment" x="-255" y="-136">recovery_time_left -= curr_res_time,
x = 0</label>
			<nail x="-162" y="-102"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="select" x="102" y="-68">rid : resource_id</label>
			<label kind="guard" x="102" y="-51">curr_res_id == rid &amp;&amp;
recovery_time_left&lt;=curr_res_time</label>
			<label kind="synchronisation" x="102" y="-17">freeResource[rid]!</label>
			<label kind="assignment" x="102" y="0">recovery_time_left = 0,
curr_res_time = 0,
x = 0</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="select" x="-221" y="-51">rid: resource_id</label>
			<label kind="guard" x="-221" y="-34">curr_res_id == -1</label>
			<label kind="synchronisation" x="-221" y="-17">takeResource[rid]!</label>
			<label kind="assignment" x="-221" y="0">res_time(rid),
x = 0</label>
		</transition>
	</template>
	<template>
		<name>Resource</name>
		<parameter>resource_id r_id</parameter>
		<declaration>// Place local declarations here.

patient_id list[n+1];
patient_id priorityList[n+1];
int[0,n] len;
int[0,n] lenPQ;

// Put an element at the end of the queue
void enqueue(patient_id element)
{
        list[len++] = element;
}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}

// Returns the front element of the queue
patient_id front()
{
   return list[0];
}

// Returns the last element of the queue
patient_id tail()
{
   return list[len - 1];
}



// Put an element at the end of the priority queue
void enqueuePQ(patient_id element)
{
        priorityList[lenPQ++] = element;
}

// Remove the front element of the priority queue
void dequeuePQ()
{
        int i = 0;
        lenPQ -= 1;
        while (i &lt; lenPQ)
        {
                priorityList[i] = priorityList[i + 1];
                i++;
        }
        priorityList[i] = 0;
}

// Returns the front element of the priority queue
patient_id frontPQ()
{
   return priorityList[0];
}

// Returns the last element of the priority queue
patient_id tailPQ()
{
   return priorityList[lenPQ - 1];
}

clock x;</declaration>
		<location id="id5" x="-204" y="8">
			<name x="-246" y="17">PatientsWaiting</name>
			<label kind="invariant" x="-221" y="34">x &lt;= 1</label>
		</location>
		<location id="id6" x="221" y="8">
			<name x="195" y="25">In_Use</name>
		</location>
		<location id="id7" x="-476" y="8">
			<name x="-486" y="-26">Idle</name>
		</location>
		<location id="id8" x="501" y="0">
			<name x="442" y="25">PriorityPatientWaiting</name>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="select" x="313" y="85">pid: patient_id</label>
			<label kind="guard" x="297" y="102">pid == frontPQ()</label>
			<label kind="synchronisation" x="288" y="119">takeResource[r_id]?</label>
			<label kind="assignment" x="306" y="136">dequeuePQ()</label>
			<nail x="365" y="76"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="select" x="348" y="-110">pid: patient_id</label>
			<label kind="synchronisation" x="289" y="-93">freeResourceAndAddToPriorityQueue[r_id][pid]?</label>
			<label kind="assignment" x="306" y="-76">enqueuePQ(pid)</label>
			<nail x="365" y="-51"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="select" x="178" y="-178">pid: patient_id</label>
			<label kind="synchronisation" x="136" y="-161">getInQueueOfResource[r_id][pid]?</label>
			<label kind="assignment" x="178" y="-144">enqueue(pid)</label>
			<nail x="280" y="-119"/>
			<nail x="161" y="-119"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="select" x="-237" y="-153">pid: patient_id</label>
			<label kind="synchronisation" x="-280" y="-136">getInQueueOfResource[r_id][pid]?</label>
			<label kind="assignment" x="-238" y="-119">enqueue(pid)</label>
			<nail x="-161" y="-102"/>
			<nail x="-255" y="-102"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-136" y="-297">len == 0</label>
			<label kind="synchronisation" x="-170" y="-272">freeResource[r_id]?</label>
			<nail x="-119" y="-246"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-442" y="93">takeResource[r_id]?</label>
			<nail x="-136" y="144"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="-59" y="-85">len &gt; 0 &amp;&amp; lenPQ == 0</label>
			<label kind="synchronisation" x="-42" y="-68">freeResource[r_id]?</label>
			<label kind="assignment" x="8" y="-51">x = 0</label>
			<nail x="0" y="-119"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="select" x="-59" y="-17">pid: patient_id</label>
			<label kind="guard" x="-59" y="8">pid == front()</label>
			<label kind="synchronisation" x="-76" y="25">takePatient[pid]!</label>
			<label kind="assignment" x="-51" y="42">dequeue()</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Patient, Resource;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] forall (i : patient_id) (Patient(i).Ask_For_Resource &amp;&amp; Patient(i).recovery_time_left==0) imply Patient(i).Exit</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] forall (i : patient_id) Patient(i).In_Queue imply Patient(i).recovery_time_left&gt;0</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] forall (i : patient_id) Patient(i).Ask_For_Resource imply Patient(i).recovery_time_left&gt;0</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; forall (i : patient_id) Patient(i).Ask_For_Resource imply Patient(i).Exit</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] forall (i : patient_id) forall (j : patient_id) Patient(i).ResourceGranted &amp;&amp; Patient(j).ResourceGranted imply (i == j || Patient(i).curr_res_id != Patient(j).curr_res_id)</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
